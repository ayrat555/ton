defmodule Ton.BitBuilderTest do
  use ExUnit.Case

  alias Ton.BitBuilder

  describe "write_uint/3" do
    test "serializez uints" do
      tests = [
        [10_290, 29, '00014194_'],
        [41_732, 27, '0014609_'],
        [62_757, 22, '03D496_'],
        [44_525, 16, 'ADED'],
        [26_925, 30, '0001A4B6_'],
        [52_948, 27, '0019DA9_'],
        [12_362, 20, '0304A'],
        [31_989, 16, '7CF5'],
        [8_503, 21, '0109BC_'],
        [54_308, 17, '6A124_'],
        [61_700, 25, '0078824_'],
        [63_112, 20, '0F688'],
        [27_062, 29, '00034DB4_'],
        [37_994, 30, '000251AA_'],
        [47_973, 27, '00176CB_'],
        [18_996, 25, '00251A4_'],
        [34_043, 21, '0427DC_'],
        [8_234, 18, '080AA_'],
        [16_218, 26, '000FD6A_'],
        [40_697, 25, '004F7CC_'],
        [43_740, 27, '00155B9_'],
        [35_773, 31, '0001177B_'],
        [32_916, 18, '20252_'],
        [1_779, 24, '0006F3'],
        [35_968, 17, '46404_'],
        [15_503, 23, '00791F_'],
        [25_860, 21, '032824_'],
        [20_651, 29, '0002855C_'],
        [14_369, 16, '3821'],
        [28_242, 24, '006E52'],
        [28_446, 18, '1BC7A_'],
        [48_685, 16, 'BE2D'],
        [54_822, 18, '3589A_'],
        [50_042, 22, '030DEA_'],
        [11_024, 30, '0000AC42_'],
        [44_958, 26, '002BE7A_'],
        [20_297, 27, '0009E93_'],
        [24_757, 16, '60B5'],
        [36_043, 29, '0004665C_'],
        [24_210, 16, '5E92'],
        [49_621, 29, '00060EAC_'],
        [63_571, 17, '7C29C_'],
        [16_047, 24, '003EAF'],
        [61_384, 27, '001DF91_'],
        [57_607, 25, '007083C_'],
        [32_945, 30, '000202C6_'],
        [31_215, 29, '0003CF7C_'],
        [3_088, 21, '006084_'],
        [45_519, 24, '00B1CF'],
        [53_126, 26, '0033E1A_']
      ]

      Enum.each(tests, fn [number, bits, result] ->
        bitbuilder = BitBuilder.new()

        bitbuilder = BitBuilder.write_uint(bitbuilder, number, bits)
        assert bitbuilder.array |> :binary.list_to_bin() |> Base.encode16(case: :upper)
      end)
    end
  end
end
